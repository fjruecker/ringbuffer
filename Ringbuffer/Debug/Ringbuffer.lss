
Ringbuffer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000182  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000182  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  0080010e  0080010e  00000224  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a58  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e8  00000000  00000000  00000d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000049b  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  00001ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000046e  00000000  00000000  00001b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000141  00000000  00000000  00001fda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  0000211b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e2 e8       	ldi	r30, 0x82	; 130
  90:	f1 e0       	ldi	r31, 0x01	; 1
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	ae 30       	cpi	r26, 0x0E	; 14
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	ae e0       	ldi	r26, 0x0E	; 14
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a1 32       	cpi	r26, 0x21	; 33
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 5d 00 	call	0xba	; 0xba <main>
  b2:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
    UARTInit(103); // baud 9600
  ba:	87 e6       	ldi	r24, 0x67	; 103
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 b2 00 	call	0x164	; 0x164 <UARTInit>
	RingbufferInit();
  c2:	0e 94 72 00 	call	0xe4	; 0xe4 <RingbufferInit>
    while (1) 
    {
		SendSerialData("Hello World!", 12);
  c6:	6c e0       	ldi	r22, 0x0C	; 12
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	0e 94 77 00 	call	0xee	; 0xee <SendSerialData>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	81 ee       	ldi	r24, 0xE1	; 225
  d4:	94 e0       	ldi	r25, 0x04	; 4
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <main+0x1c>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <main+0x26>
  e0:	00 00       	nop
  e2:	f1 cf       	rjmp	.-30     	; 0xc6 <main+0xc>

000000e4 <RingbufferInit>:
unsigned char ringbuffer[RINGBUFFERSIZE];
unsigned char writeIndex, readIndex;

void RingbufferInit(void)
{
	writeIndex = 0;
  e4:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
	readIndex = 0;
  e8:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <readIndex>
  ec:	08 95       	ret

000000ee <SendSerialData>:

char SendSerialData(char * pSerialData,
					unsigned char len)
{
	int freeSize;
	if(writeIndex >= readIndex) {
  ee:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <__data_end>
  f2:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <readIndex>
  f6:	42 17       	cp	r20, r18
  f8:	40 f0       	brcs	.+16     	; 0x10a <SendSerialData+0x1c>
		freeSize = RINGBUFFERSIZE - (writeIndex - readIndex) - 1;
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	42 1b       	sub	r20, r18
  fe:	51 09       	sbc	r21, r1
 100:	20 e1       	ldi	r18, 0x10	; 16
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	24 1b       	sub	r18, r20
 106:	35 0b       	sbc	r19, r21
 108:	05 c0       	rjmp	.+10     	; 0x114 <SendSerialData+0x26>
	}
	else {
		freeSize = readIndex - writeIndex - 1;
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	24 1b       	sub	r18, r20
 10e:	31 09       	sbc	r19, r1
 110:	21 50       	subi	r18, 0x01	; 1
 112:	31 09       	sbc	r19, r1
	}
	
	if(freeSize < len) {
 114:	46 2f       	mov	r20, r22
 116:	50 e0       	ldi	r21, 0x00	; 0
 118:	24 17       	cp	r18, r20
 11a:	35 07       	cpc	r19, r21
 11c:	0c f1       	brlt	.+66     	; 0x160 <SendSerialData+0x72>
		return 0;
	}
	
	for(int i=0; i<len; i++) {
 11e:	14 16       	cp	r1, r20
 120:	15 06       	cpc	r1, r21
 122:	bc f4       	brge	.+46     	; 0x152 <SendSerialData+0x64>
 124:	dc 01       	movw	r26, r24
 126:	ac 01       	movw	r20, r24
 128:	46 0f       	add	r20, r22
 12a:	51 1d       	adc	r21, r1
		ringbuffer[writeIndex] = pSerialData[i];
 12c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <__data_end>
 130:	2d 91       	ld	r18, X+
 132:	e9 2f       	mov	r30, r25
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	e1 5f       	subi	r30, 0xF1	; 241
 138:	fe 4f       	sbci	r31, 0xFE	; 254
 13a:	20 83       	st	Z, r18
		writeIndex ++;
 13c:	9f 5f       	subi	r25, 0xFF	; 255
		if(writeIndex >= RINGBUFFERSIZE) {
 13e:	91 31       	cpi	r25, 0x11	; 17
 140:	18 f4       	brcc	.+6      	; 0x148 <SendSerialData+0x5a>
		return 0;
	}
	
	for(int i=0; i<len; i++) {
		ringbuffer[writeIndex] = pSerialData[i];
		writeIndex ++;
 142:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <__data_end>
 146:	02 c0       	rjmp	.+4      	; 0x14c <SendSerialData+0x5e>
		if(writeIndex >= RINGBUFFERSIZE) {
			writeIndex = 0;
 148:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
	
	if(freeSize < len) {
		return 0;
	}
	
	for(int i=0; i<len; i++) {
 14c:	a4 17       	cp	r26, r20
 14e:	b5 07       	cpc	r27, r21
 150:	69 f7       	brne	.-38     	; 0x12c <SendSerialData+0x3e>
		if(writeIndex >= RINGBUFFERSIZE) {
			writeIndex = 0;
		}
	}
	
	UCSR0B |= (1 << UDRIE0);
 152:	e1 ec       	ldi	r30, 0xC1	; 193
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 62       	ori	r24, 0x20	; 32
 15a:	80 83       	st	Z, r24
	return 1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	08 95       	ret
	else {
		freeSize = readIndex - writeIndex - 1;
	}
	
	if(freeSize < len) {
		return 0;
 160:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	UCSR0B |= (1 << UDRIE0);
	return 1;
}
 162:	08 95       	ret

00000164 <UARTInit>:
#include <avr/io.h>
#include <avr/interrupt.h>

void UARTInit(unsigned int baud)
{
	UBRR0 = (unsigned char) baud;
 164:	99 27       	eor	r25, r25
 166:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 16a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 16e:	88 e1       	ldi	r24, 0x18	; 24
 170:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (3 << UCSZ00);
 174:	86 e0       	ldi	r24, 0x06	; 6
 176:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	sei();
 17a:	78 94       	sei
 17c:	08 95       	ret

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
